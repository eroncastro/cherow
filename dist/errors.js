export const errorMessages = {
    [0]: 'Unexpected token',
    [2]: 'Nothing to repeat',
    [3]: '\\ at end of pattern',
    [4]: 'Invalid property name',
    [5]: 'Invalid decimal escape',
    [6]: 'Back references can not have more two or more consecutive numbers',
    [7]: 'Invalid named reference',
    [8]: 'Invalid regular expression',
    [9]: 'Invalid Escape',
    [24]: 'Invalid named capture referenced',
    [11]: 'Invalid regular expression without u-flag',
    [12]: 'Invalid regular expression with u-flag',
    [10]: 'Invalid unicode Escape',
    [13]: 'Range out of order in character class',
    [14]: 'Invalid character class',
    [15]: 'Unterminated character class',
    [23]: 'No group to terminate',
    [16]: 'Invalid quantifier',
    [17]: 'Invalid quantifier without u-flag and web compatible mode',
    [18]: 'Unclosed group',
    [19]: 'Invalid group',
    [20]: 'Invalid capture group name',
    [21]: 'Invalid extended unicode escape',
    [22]: "Already declared group name '%0'",
    [25]: 'Lone quantifier brackets',
    [26]: "Duplicate regular expression flag '%0'",
    [27]: 'Unterminated MultiLineComment',
    [28]: 'HTML comments are not allowed in modules',
    [29]: "Illegal character '%0'",
    [34]: 'Unterminated string literal',
    [35]: 'Unterminated template literal',
    [33]: 'Octal escapes are not allowed in strict mode',
    [32]: 'Escapes \\8 or \\9 are not syntactically valid escapes',
    [31]: 'Invalid hexadecimal escape sequence',
    [30]: 'Unicode codepoint must not be greater than 0x10FFFF',
    [36]: 'Missing exponent',
    [38]: 'Invalid BigIntLiteral',
    [37]: 'Identifier starts immediately after numeric literal',
    [39]: 'Expected number in radix %0',
    [40]: 'Legacy octal literals are not allowed in strict mode',
    [41]: "Identifier '%0' has already been declared",
    [45]: "Duplicate binding '%0'",
    [42]: "The `catch` var '%0' can't be redefined",
    [44]: 'In strict mode code, functions can only be declared at top level or inside a block',
    [43]: 'In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement',
    [46]: "let can't be a variable name in strict mode",
    [47]: "Exported binding '%0' is not declared",
    [48]: "Exported binding '%0' has already been declared",
    [49]: 'Missing initializer in const declaration',
    [54]: 'Illegal newline after throw',
    [55]: 'Illegal return statement',
    [50]: 'Illegal continue statement: no surrounding iteration statement',
    [51]: 'Illegal break statement',
    [53]: "Label '%0' has already been declared",
    [52]: 'Strict mode code may not include a with statement',
    [56]: 'Delete of an unqualified identifier in strict mode',
    [57]: 'Unary expressions as the left operand of an exponentation expression must be disambiguated with parentheses',
    [58]: 'Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass',
    [59]: 'Member access on super must be in a method',
    [1]: "Unexpected token '%0'",
    [60]: 'Duplicate constructor method in class',
    [61]: 'Function name may not be eval or arguments in strict mode',
    [62]: "Classes may not have a static property named 'prototype'",
    [63]: 'Class constructor may not be a %0',
    [64]: 'Unterminated regular expression',
    [65]: 'Unexpected regular expression flag',
    [66]: "'yield' is a reserved keyword within generator function bodies",
    [67]: "'%0' may not be used as an identifier in this context",
    [68]: "Can not use 'let' as a class name",
    [69]: 'Can not use `let` when binding through `let` or `const`',
    [70]: 'Can not use `let` as variable name in strict mode',
    [71]: 'Await is only valid in async functions',
    [72]: 'Invalid use of reserved word as variable name',
    [73]: '`Static` is a reserved word in strict mode',
    [74]: ' Invalid use of reserved word as a variable name in strict mode',
    [75]: "%0 can't appear in single-statement context",
    [76]: 'Async functions can only be declared at the top level or inside a block',
    [77]: "Classes may not have a private field named '#constructor'",
    [78]: "Classes may not have a field named 'constructor'",
    [79]: "Classes may not have a static private property named '#prototype'",
    [80]: 'Async methods are a restricted production and cannot have a newline following it',
    [81]: 'Only methods are allowed in classes',
    [82]: 'Private fields can not be deleted',
    [83]: 'Private fields can not be deleted',
    [83]: '%0 increment/decrement may not have eval or arguments operand in strict mode',
    [84]: 'Invalid left-hand side in assignment',
    [85]: 'Unexpected eval or arguments in strict mode',
    [86]: 'Unexpected strict mode reserved word',
    [87]: 'Invalid shorthand property initializer',
    [88]: 'Illegal arrow function parameter list',
    [89]: 'Invalid left-hand side in for-in',
    [90]: 'Invalid left-hand side in for-loop',
    [91]: 'Enable the experimental option for V8 experimental features',
    [92]: 'A trailing comma is not permitted after the rest element ',
    [93]: 'Legacy octal literals are not allowed in strict mode',
    [94]: '%0 functions must have %1 argument%2',
    [95]: 'Setter function argument must not be a rest parameter',
    [96]: '%0  statement must be nested within an iteration statement',
    [97]: '`let \n [` is a restricted production at the start of a statement',
    [98]: '%0 is already bound as a lexical binding',
    [99]: 'The lexical binding %0 has been bound multiple times',
    [101]: 'Cannot use `let` or `const` with the same name as bound to a parameter',
    [100]: 'Double declaration of the same binding name in a `catch` var'
};
export function constructError(index, line, column, description) {
    const error = new SyntaxError(`Line ${line}, column ${column}: ${description}`);
    error.index = index;
    error.line = line;
    error.column = column;
    error.description = description;
    return error;
}
export function report(parser, type, ...params) {
    const { index, line, column } = parser;
    const message = errorMessages[type].replace(/%(\d+)/g, (_, i) => params[i]);
    const error = constructError(index, line, column, message);
    throw error;
}
//# sourceMappingURL=errors.js.map