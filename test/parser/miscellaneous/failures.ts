import { Context } from '../../../src/common';
import { pass, fail } from '../../test-utils';

describe('Miscellaneous - Failurea', () => {
  const inValids: Array<[string, Context]> = [
    ['function*g() { var yield; }', Context.Empty],
    ['(class {[3]:0})', Context.Empty],
    ['(function ({e: a.b}) {})', Context.Empty],
    ['yield 10', Context.Empty],
    ['ï¿½!', Context.Empty],
    ['try { }', Context.Empty],
    ['0B1a', Context.Empty],
    ['function t(true) { }', Context.Empty],
    ['0o9', Context.Empty],
    ['0B', Context.Empty],
    ['var x = /[a-z]/\\ux', Context.Empty],
    ['with(true) class a {}', Context.Empty],
    ['function*g(yield = 0){}', Context.Empty],
    ['switch (cond) { case 10: let a = 20; ', Context.Empty],
    ['var if = 42', Context.Empty],
    ['"use strict"; a package', Context.Empty],
    ['(function*() { yield* })', Context.Empty],
    ['import { foo, bar }', Context.Module],
    ['if (1) import "acorn";', Context.Module],
    ['with(x) function f() {}', Context.OptionsDisableWebCompat | Context.Strict],
    ['if (x) async function f() {}', Context.OptionsDisableWebCompat],
    ['if (x); else async function f() {}', Context.OptionsDisableWebCompat],
    ['foo: async function f() {}', Context.OptionsDisableWebCompat],
    ['for (;;) async function f() {}', Context.Empty],
    ['while (;;) async function f() {}', Context.Empty],
    ['do async function f() {}; while (x);', Context.Empty],
    ['with(x) async function f() {}', Context.Strict],
    ['(b\n++c);', Context.Empty],
    ['for (;b\n++c);', Context.Empty],
    ['for (b\n++c;;);', Context.Empty],
    ['if (b\n++c);', Context.Empty],
    ['"\\x";', Context.Empty],
    ['3ea', Context.Empty],
    ['3in []', Context.Empty],
    ['3e+', Context.Empty],
    ['3x0', Context.Empty],
    ['/test', Context.Empty],
    ['{', Context.Empty],
    ['() => return', Context.Empty],
    ['return', Context.Empty],
    ['*() => {return}', Context.Empty],
    ['if (x) function f() {}', Context.OptionsDisableWebCompat],
    ['if (x); else function f() {}', Context.OptionsDisableWebCompat],
    ['foo: function f() {}', Context.OptionsDisableWebCompat],
    ['if (x); else function * f() {}', Context.Empty],
    ['foo: function *f() {}', Context.Empty],
    ['for (;;) function * f() {}', Context.Empty],
    ['while (;;) function * f() {}', Context.Empty],
    ['do function * f() {}; while (x);', Context.Empty],
    ['with(x) function * f() {}', Context.Strict],
    ['if (x) let y = x', Context.Empty],
    ['if (x); else let y = x', Context.Empty],
    ['foo: let y = x', Context.Empty],
    ['for (;;) let y = x', Context.Empty],
    ['while (;;) let y = x', Context.Empty],
    ['do let y = x; while (x);', Context.Empty],
    ['with(x) let y = x', Context.Strict],
    ['if (x) const y = x', Context.Empty],
    ['if (x); else const y = x', Context.Empty],
    ['foo: const y = x', Context.Empty],
    ['for (;;) const y = x', Context.Empty],
    ['do const y = x; while (x);', Context.Empty],
    ['with(x) const y = x', Context.Strict],
    ['foo: class x {}', Context.Empty],
    ['for (;;) class X {}', Context.Empty],
    ['with(x) class X {}', Context.Empty],
    ['{ return; }', Context.Empty],
    ['({get ', Context.Empty],
    ['new.prop', Context.Empty],
    ['for (const of 42);', Context.Empty],
    ['1 + { t:t,', Context.Empty],
    ['function hello() { "use strict"; 021; }', Context.Empty],
    ['for(let ? b : c in 0);', Context.Empty],
    ['for (const x = 0 in y){}', Context.Empty],
    ['0B12', Context.Empty],
    ['({a({e: a.b}){}})', Context.Empty],
    ['"use strict"; "\\00";', Context.Empty],
    ['/*', Context.Empty],
    ['try {} catch (answer()) {} ', Context.Empty],
    ['(function *(x, ...yield){})', Context.Empty],
    ['function hello() { "use strict"; "\\1"; }', Context.Empty],
    ['function*g({yield}){}', Context.Empty],
    ['({set a({e: a.b}){}})', Context.Empty],
    ['(function() { yield 3; })', Context.Empty],
    ['[', Context.Empty],
    ['(a', Context.Empty],
    ['{ return; }', Context.Empty],
    [' function null() { }', Context.Empty],
    //['[+{a = 0}];', Context.Empty],
    ['for (const of 42);', Context.Empty],
    //    ['var x,;', Context.Empty],
    ['class ', Context.Empty],
    [' function* a({e: a.b}) {}', Context.Empty],
    ['1.e', Context.Empty],
    ['export 3', Context.Module | Context.Strict],
    ['export var await', Context.Module | Context.Strict],
    ['try {} catch (answer()) {} ', Context.Empty]
  ];

  fail('Miscellaneous - Failurea', inValids);
});
