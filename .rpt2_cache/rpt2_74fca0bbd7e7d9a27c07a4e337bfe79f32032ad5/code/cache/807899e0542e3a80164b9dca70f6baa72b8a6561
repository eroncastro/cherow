{"map":"{\"version\":3,\"file\":\"numeric.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/scanner/numeric.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { toHex, isDigit } from './common';\r\nimport { isIdentifierStart } from '../chars';\r\nimport { report } from '../errors';\r\nexport function returnBigIntOrNumericToken(state) {\r\n    if (state.source.charCodeAt(state.index) === 110) {\r\n        if (state.flags & 4)\r\n            report(state, 38);\r\n        state.index++;\r\n        state.column++;\r\n        return 116;\r\n    }\r\n    else {\r\n        if ((state.flags & (16 | 8)) === 0)\r\n            state.tokenValue = +state.tokenValue;\r\n        return 131074;\r\n    }\r\n}\r\nexport function scanNumeric(state, context) {\r\n    let { index, column } = state;\r\n    while (isDigit(state.source.charCodeAt(index))) {\r\n        index++;\r\n        column++;\r\n    }\r\n    if (state.source.charCodeAt(index) === 46) {\r\n        index++;\r\n        column++;\r\n        state.flags = 4;\r\n        while (isDigit(state.source.charCodeAt(index))) {\r\n            index++;\r\n            column++;\r\n        }\r\n    }\r\n    let end = index;\r\n    switch (state.source.charCodeAt(index)) {\r\n        case 69:\r\n        case 101: {\r\n            index++;\r\n            column++;\r\n            state.flags = 4;\r\n            if (state.source.charCodeAt(index) === 43 || state.source.charCodeAt(index) === 45) {\r\n                index++;\r\n                column++;\r\n            }\r\n            if (!isDigit(state.source.charCodeAt(index)))\r\n                report(state, 36);\r\n            index++;\r\n            column++;\r\n            while (isDigit(state.source.charCodeAt(index))) {\r\n                index++;\r\n                column++;\r\n            }\r\n            end = index;\r\n        }\r\n        default:\r\n    }\r\n    const code = state.source.charCodeAt(index);\r\n    if (code !== 110 && (isDigit(code) || isIdentifierStart(code)))\r\n        report(state, 37);\r\n    state.index = index;\r\n    state.column = column;\r\n    state.tokenValue = state.source.slice(state.startIndex, end);\r\n    if (context & 8)\r\n        state.tokenRaw = state.tokenValue;\r\n    return returnBigIntOrNumericToken(state);\r\n}\r\nexport function scanHexIntegerLiteral(state) {\r\n    let { index, column } = state;\r\n    let value = toHex(state.source.charCodeAt(index));\r\n    if (value < 0)\r\n        report(state, 0);\r\n    index++;\r\n    column++;\r\n    while (index < state.length) {\r\n        const digit = toHex(state.source.charCodeAt(index));\r\n        if (digit < 0)\r\n            break;\r\n        value = value * 16 + digit;\r\n        index++;\r\n        column++;\r\n    }\r\n    state.index = index;\r\n    state.column = column;\r\n    state.tokenValue = value;\r\n    return returnBigIntOrNumericToken(state);\r\n}\r\nexport function scanBinaryOrOctalDigits(state, base) {\r\n    let { index, column } = state;\r\n    let value = 0;\r\n    let numberOfDigits = 0;\r\n    while (index < state.length) {\r\n        const ch = state.source.charCodeAt(index);\r\n        const converted = ch - 48;\r\n        if (!(ch >= 48 && ch <= 57) || converted >= base)\r\n            break;\r\n        value = value * base + converted;\r\n        index++;\r\n        column++;\r\n        numberOfDigits++;\r\n    }\r\n    if (numberOfDigits === 0)\r\n        report(state, 39, '' + base);\r\n    state.flags |= 16;\r\n    state.index = index;\r\n    state.column = column;\r\n    state.tokenValue = value;\r\n    return returnBigIntOrNumericToken(state);\r\n}\r\nexport function scanImplicitOctalDigits(state, context) {\r\n    if ((context & 1024) !== 0)\r\n        report(state, 40);\r\n    let { index, column } = state;\r\n    let code = 0;\r\n    while (index < state.length) {\r\n        const next = state.source.charCodeAt(index);\r\n        if (next < 48 || next > 55) {\r\n            state.flags |= 4;\r\n            return scanNumeric(state, context);\r\n        }\r\n        else {\r\n            code = code * 8 + (next - 48);\r\n            index++;\r\n            column++;\r\n        }\r\n    }\r\n    state.flags |= 8;\r\n    state.index = index;\r\n    state.column = column;\r\n    state.tokenValue = code;\r\n    return 131074;\r\n}\r\n//# sourceMappingURL=numeric.js.map","dtsmap":{"name":"D:/cherow_gh/cherow1/scanner/numeric.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"numeric.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../src/scanner/numeric.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,OAAO,EAAS,MAAM,WAAW,CAAC;AAGxD,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAOjC,wBAAgB,0BAA0B,CAAC,KAAK,EAAE,WAAW,GAAG,KAAK,CAUpE;AAUD,wBAAgB,WAAW,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,GAAG,KAAK,CA+CvE;AAUD,wBAAgB,qBAAqB,CAAC,KAAK,EAAE,WAAW,GAAG,MAAM,CAiBhE;AAWD,wBAAgB,uBAAuB,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAuB9E;AAUD,wBAAgB,uBAAuB,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,GAAG,MAAM,CAwBpF\"}"},"dts":{"name":"D:/cherow_gh/cherow1/scanner/numeric.d.ts","writeByteOrderMark":false,"text":"import { ParserState, Context } from '../common';\r\nimport { Token } from '../token';\r\nexport declare function returnBigIntOrNumericToken(state: ParserState): Token;\r\nexport declare function scanNumeric(state: ParserState, context: Context): Token;\r\nexport declare function scanHexIntegerLiteral(state: ParserState): number;\r\nexport declare function scanBinaryOrOctalDigits(state: ParserState, base: 2 | 8): Token;\r\nexport declare function scanImplicitOctalDigits(state: ParserState, context: Context): number;\r\n//# sourceMappingURL=numeric.d.ts.map"}}
