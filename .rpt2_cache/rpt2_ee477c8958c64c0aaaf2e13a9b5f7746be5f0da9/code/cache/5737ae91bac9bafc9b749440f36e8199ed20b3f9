{"map":"{\"version\":3,\"file\":\"string.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/scanner/string.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { report } from '../errors';\r\nimport { fromCodePoint, toHex, nextChar, scanNext } from './common';\r\nexport function scanStringLiteral(state, context, quote) {\r\n    const { index: start, lastChar } = state;\r\n    let ret = '';\r\n    let ch = scanNext(state, 34);\r\n    while (ch !== quote) {\r\n        if ((ch & 8) === 8) {\r\n            if (ch === 92) {\r\n                ch = scanNext(state, 34);\r\n                if (ch >= 128) {\r\n                    ret += fromCodePoint(ch);\r\n                }\r\n                else {\r\n                    state.lastChar = ch;\r\n                    const code = table[ch](state, context, ch);\r\n                    if (code >= 0)\r\n                        ret += fromCodePoint(code);\r\n                    else\r\n                        reportInvalidEscapeError(state, code);\r\n                    ch = state.lastChar;\r\n                }\r\n            }\r\n            else if (((ch & 83) < 3 && ch === 13) || ch === 10) {\r\n                report(state, 0);\r\n            }\r\n            else\r\n                ret += fromCodePoint(ch);\r\n        }\r\n        else\r\n            ret += fromCodePoint(ch);\r\n        ch = scanNext(state, 34);\r\n    }\r\n    state.index++;\r\n    state.column++;\r\n    if (context & 8)\r\n        state.tokenRaw = state.source.slice(start, state.index);\r\n    state.tokenValue = ret;\r\n    state.lastChar = lastChar;\r\n    return 131075;\r\n}\r\nexport const table = new Array(128).fill(nextChar);\r\ntable[98] = () => 8;\r\ntable[102] = () => 12;\r\ntable[114] = () => 13;\r\ntable[110] = () => 10;\r\ntable[116] = () => 9;\r\ntable[118] = () => 11;\r\ntable[13] = state => {\r\n    state.column = -1;\r\n    state.line++;\r\n    const { index } = state;\r\n    if (index < state.source.length) {\r\n        const ch = state.source.charCodeAt(index);\r\n        if (ch === 10) {\r\n            state.lastChar = ch;\r\n            state.index = index + 1;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\ntable[10] = table[8232] = table[8233] = state => {\r\n    state.column = -1;\r\n    state.line++;\r\n    return -1;\r\n};\r\ntable[48] = table[49] = table[50] = table[51] = (state, context, first) => {\r\n    let code = first - 48;\r\n    let index = state.index + 1;\r\n    let column = state.column + 1;\r\n    if (index < state.source.length) {\r\n        const next = state.source.charCodeAt(index);\r\n        if (next < 48 || next > 55) {\r\n            if (code !== 0 || next === 56 || next === 57) {\r\n                if (context & 1024)\r\n                    return -2;\r\n                state.flags = state.flags | 8;\r\n            }\r\n        }\r\n        else if (context & 1024) {\r\n            return -2;\r\n        }\r\n        else {\r\n            state.flags = state.flags | 8;\r\n            state.lastChar = next;\r\n            code = code * 8 + (next - 48);\r\n            index++;\r\n            column++;\r\n            if (index < state.source.length) {\r\n                const next = state.source.charCodeAt(index);\r\n                if (next >= 48 && next <= 55) {\r\n                    state.lastChar = next;\r\n                    code = code * 8 + (next - 48);\r\n                    index++;\r\n                    column++;\r\n                }\r\n            }\r\n            state.index = index - 1;\r\n            state.column = column - 1;\r\n        }\r\n    }\r\n    return code;\r\n};\r\ntable[52] = table[53] = table[54] = table[55] = (state, context, first) => {\r\n    if (context & 1024)\r\n        return -2;\r\n    let code = first - 48;\r\n    const index = state.index + 1;\r\n    const column = state.column + 1;\r\n    if (index < state.source.length) {\r\n        const next = state.source.charCodeAt(index);\r\n        if (next >= 48 && next <= 55) {\r\n            code = code * 8 + (next - 48);\r\n            state.lastChar = next;\r\n            state.index = index;\r\n            state.column = column;\r\n        }\r\n    }\r\n    return code;\r\n};\r\ntable[56] = table[57] = () => -3;\r\ntable[120] = state => {\r\n    const ch1 = (state.lastChar = scanNext(state, 31));\r\n    const hi = toHex(ch1);\r\n    if (hi < 0)\r\n        return -4;\r\n    const ch2 = (state.lastChar = scanNext(state, 31));\r\n    const lo = toHex(ch2);\r\n    if (lo < 0)\r\n        return -4;\r\n    return hi * 16 + lo;\r\n};\r\ntable[117] = state => {\r\n    let ch = (state.lastChar = scanNext(state, 10));\r\n    if (ch === 123) {\r\n        ch = state.lastChar = scanNext(state, 10);\r\n        let code = toHex(ch);\r\n        if (code < 0)\r\n            return -4;\r\n        ch = state.lastChar = scanNext(state, 10);\r\n        while (ch !== 125) {\r\n            const digit = toHex(ch);\r\n            if (digit < 0)\r\n                return -4;\r\n            code = code * 16 + digit;\r\n            if (code > 0x10fff)\r\n                return -5;\r\n            ch = state.lastChar = scanNext(state, 10);\r\n        }\r\n        return code;\r\n    }\r\n    else {\r\n        let code = toHex(ch);\r\n        if (code < 0)\r\n            return -4;\r\n        for (let i = 0; i < 3; i++) {\r\n            ch = state.lastChar = scanNext(state, 10);\r\n            const digit = toHex(ch);\r\n            if (digit < 0)\r\n                return -4;\r\n            code = code * 16 + digit;\r\n        }\r\n        return code;\r\n    }\r\n};\r\nexport function reportInvalidEscapeError(state, code) {\r\n    switch (code) {\r\n        case -2:\r\n            return report(state, 33);\r\n        case -3:\r\n            return report(state, 32);\r\n        case -4:\r\n            return report(state, 31);\r\n        case -5:\r\n            return report(state, 30);\r\n        default:\r\n            return;\r\n    }\r\n}\r\n//# sourceMappingURL=string.js.map","dtsmap":{"name":"D:/cherow_gh/cherow1/scanner/string.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"string.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../src/scanner/string.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,WAAW,EAAE,OAAO,EAAS,MAAM,WAAW,CAAC;AAExD,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAEjC,OAAO,EAAkC,MAAM,EAAY,MAAM,UAAU,CAAC;AAU5E,wBAAgB,iBAAiB,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,GAAG,KAAK,CAiC5F;AAED,eAAO,MAAM,KAAK,qEAAiG,CAAC;AAwJpH,wBAAgB,wBAAwB,CAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,GAAG,IAAI,CAiB/E\"}"},"dts":{"name":"D:/cherow_gh/cherow1/scanner/string.d.ts","writeByteOrderMark":false,"text":"import { ParserState, Context } from '../common';\r\nimport { Token } from '../token';\r\nimport { Escape } from './common';\r\nexport declare function scanStringLiteral(state: ParserState, context: Context, quote: number): Token;\r\nexport declare const table: ((state: ParserState, context: Context, first: number) => number)[];\r\nexport declare function reportInvalidEscapeError(state: ParserState, code: Escape): void;\r\n//# sourceMappingURL=string.d.ts.map"}}
